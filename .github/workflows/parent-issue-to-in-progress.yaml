name: set parent issues to in progress

on:
  workflow_call:
    secrets:
      PROJECT_AUTOMATION_APP_PEM:
        required: true
    inputs:
      project-numbers:
        description: 'Project Numbers'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      project-numbers:
        description: 'Project Numbers'
        required: true
        type: string
jobs:
  graphql:
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.PROJECT_AUTOMATION_APP_ID }}
          private-key: ${{ secrets.PROJECT_AUTOMATION_APP_PEM }}
          owner: ${{ github.repository_owner }}
      - name: Run Update
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          ORGANIZATION: CI-CMG
          PROJECT_NUMBERS: ${{ inputs.project-numbers }}
        run: |
          
          set -e
          
          IFS=","
          read -ra array <<< "$PROJECT_NUMBERS"
             
          for project_number in "${array[@]}"; do
            echo "Project $project_number"
           
            has_next_page=true
            end_cursor=''
            page=1
            set +e
            rm page*.json
            set -e
          
            while [ $has_next_page = true ]; do
          
              file=page$page.json
            
              gh api graphql -f query='query($organization: String! $number: Int! $end_cursor: String!) {
                organization(login: $organization) {
                  projectV2(number: $number) {
                    id
                    fields(first: 100) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options { id name }
                        }
                      }
                    }
                    items(first: 100, after: $end_cursor) {
                      pageInfo { endCursor startCursor hasNextPage hasPreviousPage }
                      nodes { 
                        ... on ProjectV2Item { id isArchived type
                          status: fieldValueByName(name: "Status") {
                            ... on ProjectV2ItemFieldSingleSelectValue { name }
                          }
                          content {
                            ... on Issue { id state title number 
                              issueType {
                                name
                              }
                              parent { id title number state
                                issueType { name }
                              }
                              repository { id name }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }' -f organization=$ORGANIZATION -F number=$project_number -f end_cursor=$end_cursor > $file
              
              end_cursor=$(jq -r '.data.organization.projectV2.items.pageInfo.endCursor' $file)
              has_next_page=$(jq -r '.data.organization.projectV2.items.pageInfo.hasNextPage' $file)
            
              ((page++))
          
            done
          
            jq -r '.data.organization.projectV2.items.nodes[] | select(.isArchived == false)' page*.json | jq -s > items.json
          
            project_id=$(jq -r '.data.organization.projectV2.id' page1.json)
            status_field_id=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name == "Status") | .id' page1.json)
            in_progress_value_id=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == "In progress") | .id' page1.json)
            
            jq -r '.[] | select(.content.parent != null and (.status.name == "In review" or .status.name == "In progress" or .status.name == "Blocked") )' items.json | jq -s > with_parents.json
            
            with_parents_count=$(jq -r '. | length' with_parents.json)
            for (( i=0; i<$with_parents_count; i++ ))
            do
              repository=$(jq -r ".[$i].content.repository.name" with_parents.json)
              child=$(jq -r ".[$i].content.number" with_parents.json)
              parent=$(jq -r ".[$i].content.parent.number" with_parents.json)
              parent_id=$(jq -r ".[] | select(.content.repository.name == \"$repository\" and .content.number == $parent) | .id" items.json)
              parent_status=$(jq -r ".[] | select(.content.repository.name == \"$repository\" and .content.number == $parent) | .status.name" items.json)
              if [[ "$parent_status" =~ ^(Backlog|Ready|Done)$ ]]; then
                echo "update issue $repository/$parent with status $parent_status"
                gh api graphql -f query='mutation($project: ID! $item: ID! $status_field: ID! $status_value: String!) {
                  set_status: updateProjectV2ItemFieldValue(input: { projectId: $project itemId: $item fieldId: $status_field value: { singleSelectOptionId: $status_value } }) {
                    projectV2Item { id }
                  }
                }' -f project=$project_id -f item=$parent_id -f status_field=$status_field_id -f status_value=$in_progress_value_id
              fi
            done
 
          done
