name: project-automation

on:
  workflow_dispatch:
#  schedule:
#    - cron: "* * * * *"
jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.PROJECT_AUTOMATION_APP_ID }}
          private-key: ${{ secrets.PROJECT_AUTOMATION_APP_PEM }}
      - name: Get project data
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          ORGANIZATION: CI-CMG
          PROJECT_NUMBER: 17
        run: |
          gh api graphql -f query='query($organization: String! $number: Int!) {
            organization(login: $organization) {
              projectV2(number: $number) {
                items(first: 100, after: null) {
                  pageInfo { endCursor startCursor hasNextPage hasPreviousPage }
                  nodes { 
                    ... on ProjectV2Item { id isArchived type
                      status: fieldValueByName(name: "Status") {
                        ... on ProjectV2ItemFieldSingleSelectValue { name }
                      }
                      content {
                        ... on Issue { id state title number
                          issueType {
                            name
                          }
                          parent { id title number state
                            issueType { name }
                          }
                          repository { id name }
                        }
                      }
                    }
                  }
                }
              }
            }
          }' -f organization=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json
          
          end_cursor=$(jq -r '.data.organization.projectV2.items.pageInfo.endCursor' project.json)
          has_next_page=$(jq -r '.data.organization.projectV2.items.pageInfo.hasNextPage' project.json)
          
          jq -r '.data.organization.projectV2.items.nodes[] | select(.content.parent != null and .isArchived == false and (.status.name == "In review" or .status.name == "In progress" or .status.name == "Blocked") )' project.json | jq -s > with_parents.json
          
          with_parents_count=$(jq -r '. | length' with_parents.json)
          for (( i=0; i<$with_parents_count; i++ ))
          do
            repository=$(jq -r ".[$i].content.repository.name" with_parents.json)
            child=$(jq -r ".[$i].content.number" with_parents.json)
            parent=$(jq -r ".[$i].content.parent.number" with_parents.json)
            parent_status=$(jq -r ".data.organization.projectV2.items.nodes[] | select(.content.repository.name == \"$repository\" and .content.number == $parent) | .status.name" project.json)
            if [[ "$parent_status" =~ ^(Backlog|Ready|Done)$ ]]; then
              echo "need to trigger update for issue $repository/$parent with status $parent_status"
            fi
          done
