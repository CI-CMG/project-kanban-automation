name: set end date

on:
  workflow_dispatch:
#  schedule:
#    - cron: "* * * * *"
jobs:
  graphql:
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.PROJECT_AUTOMATION_APP_ID }}
          private-key: ${{ secrets.PROJECT_AUTOMATION_APP_PEM }}
      - name: Get project data
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
          ORGANIZATION: CI-CMG
          PROJECT_NUMBER: 17
        run: |
          gh api graphql -f query='query($organization: String! $number: Int!) {
            organization(login: $organization) {
              projectV2(number: $number) {
                id
                fields(first: 100) {
                  nodes {
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options { id name }
                    }
                    ... on ProjectV2Field { id name }
                  }
                }
                items(first: 100, after: null) {
                  pageInfo { endCursor startCursor hasNextPage hasPreviousPage }
                  nodes { 
                    ... on ProjectV2Item { id isArchived type
                      status: fieldValueByName(name: "Status") {
                        ... on ProjectV2ItemFieldSingleSelectValue { name }
                      }
                      startDate: fieldValueByName(name: "Start date") {
                             ... on ProjectV2ItemFieldDateValue { date }
                      }
                      startDate: fieldValueByName(name: "End date") {
                             ... on ProjectV2ItemFieldDateValue { date }
                      }
                      content {
                        ... on Issue { id state title number 
                          issueType {
                            name
                          }
                          parent { id title number state
                            issueType { name }
                          }
                          repository { id name }
                        }
                      }
                    }
                  }
                }
              }
            }
          }' -f organization=$ORGANIZATION -F number=$PROJECT_NUMBER > project.json
          
          end_cursor=$(jq -r '.data.organization.projectV2.items.pageInfo.endCursor' project.json)
          has_next_page=$(jq -r '.data.organization.projectV2.items.pageInfo.hasNextPage' project.json)
          project_id=$(jq -r '.data.organization.projectV2.id' project.json)
          field_id=$(jq -r '.data.organization.projectV2.fields.nodes[] | select(.name == "End date") | .id' project.json)
          end_date=$(date +"%Y-%m-%d")
          
          jq -r '.data.organization.projectV2.items.nodes[] | select(.endDate == null and .isArchived == false and .status.name == "Done" )' project.json | jq -s > no_end.json
          
          count=$(jq -r '. | length' no_end.json)
          for (( i=0; i<$count; i++ ))
          do
            item_id=$(jq -r ".[$i].id" no_end.json)
            echo "setting end date $item_id"
            gh api graphql -f query='mutation($project_id: ID! $item_id: ID! $field_id: ID! $end_date: Date!) {
              set_end_date: updateProjectV2ItemFieldValue(input: {  projectId: $project_id  itemId: $item_id fieldId: $field_id  value: { date: $end_date } }) {
                projectV2Item { id }
              }
            }' -f project_id=$project_id -f item_id=$item_id -f field_id=$field_id -f end_date=$end_date
          done
